'''
    Python module for User class
    As an abstract class for further implementation
    We can have different users with different cost functions and internal variables but same methods.
'''

class User:
    
    def __init__(self, A):
        # initialize the variables of a user.
        # give values to C and w based on the user's ability
        # A is passed in by the Website class where a distribution is used (maybe normal distribution) to generate the abilities of the users. This should be passed because the distribution should be defined in Website class.
        # Attributes:
        #   - ability (A)
        #   - participation (number of badges/questions participated)
        self.ability = abs(A) # just in case the value generated by the normal distribution is negative
        self.participation = 0

    def participate(self, payOff, v, effort):
        # given the pay-off of a certain badge, the value of the badge, and the effort needed to win the badge when the pay-off is maximized, returns true if the user wants to participate.
        # the pay-off should be the maximum possible pay-off for a certain amount of efforts.
        # returns payOff >= w
        return payOff >= self.reservation_value(v, effort)

    def cost(self, effort):
        # returns a user's cost based on his ability and the targeted effort
        # return 2 * effort / self.ability
        return 1000 * (effort ** 2)
        
    def cost_derivative(self, effort):
        # hardcode the derivative of the cost function with respect to effort
        # return 2 / self.ability
        return 2000 * effort

    def reservation_value(self, v, effort):
        # returns the reservation value of a user given his ability, the value of the badge, and his targeted effort
        # should be linear to v and effort, not sure about ability.
        # maybe linear to ability.
        # return v * effort / 1000
        return 0.5

    def increment(self):
        # increment the number of participation
        self.participation += 1

    def get_participation(self):
        return self.participation
